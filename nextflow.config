workDir =    "/lustre/scratch118/humgen/hgi/users/ad7/nextflow_tower/birth_cohort_wes/work"
tmpDir =     "/lustre/scratch118/humgen/hgi/users/ad7/nextflow_tower/birth_cohort_wes/tmp"
homeDir = "/lustre/scratch118/humgen/hgi/users/ad7/nextflow_tower/birth_cohort_wes"


params {
    // specify input bam (or cram) files in tab-delimited input file:
    // 3 columns required: sample, object (path to cram or bam file) and object_index (index .crai or .bai)
    // e.g:
    // sample   object  object_index
    //PD42171b  /lustre/path_to/PD42171b.sample.dupmarked.bam   /lustre/path_to/PD42171b.sample.dupmarked.bam.bai
    tsv_file = "/lustre/scratch118/humgen/hgi/users/ad7/nextflow_tower/birth_cohort_wes/input_bams.tsv"

    // how many samples from input tsv file to process
    // -1 for all samples
    samples_to_process = -1

    ref_dir = "/lustre/scratch118/humgen/resources/ref/Homo_sapiens/HS38DH"
    // path to genome ref file, relative to ref_dir/
    ref_file = "hs38DH.fa"

    bed_dir = "/lustre/scratch118/humgen/resources/exome/Homo_sapiens"
    // path to bed files, relative to bed_dir/
    bed_file_deepvariant = "Twist/Twist_Human_Core_Exome_BI-CTR_padded_merged.bed"
    bed_file_gatk = "Twist/Twist_Human_Core_Exome_BI-CTR_padded_merged.interval_list"

    // must be one of
    // "remap_inputs" "sort_inputs" "no_remap_no_sort"
    run_mode = "sort_inputs"

    // which downstream tasks to run:
    run_markDuplicates = true
    run_coord_sort_cram = true
    run_deepvariant = true
    run_haplotypecaller = true

    // how to stage output files from work dir into results dir
    // choose "rellink", "symlink", "move" or "copy"
    copy_mode = "rellink"
    outdir =    "/lustre/scratch118/humgen/hgi/users/ad7/nextflow_tower/birth_cohort_wes/results"
    reportdir = "/lustre/scratch118/humgen/hgi/users/ad7/nextflow_tower/birth_cohort_wes/reports"
}

report {
  enabled = true
  file = "${params.reportdir}/report.html"
}


timeline {
  enabled = true
  file = "${params.reportdir}/timeline.html"
}

trace {
  enabled = true
  file = "${params.reportdir}/trace.txt"
}
process {
  
  withName: bam_to_cram {
    container  = 'file:///software/hgi/containers/samtools-1.10.sif'
    containerOptions = "--bind /lustre --bind /tmp"
    maxRetries = 3
    memory = '18G'
    cpus = 1
    //time '100m'
    //queue 'normal'
  }

  withName: coord_sort_cram {
    container  = 'file:///software/hgi/containers/sambamba_0.6.4.sif'
    containerOptions = "--bind /lustre --bind /tmp"
    errorStrategy = { (task.attempt <= maxRetries)  ? 'retry' : 'ignore' }
    maxRetries = 3
    memory = '18G'
    cpus = 1
    //time '100m'
    //queue 'normal'
  }

  withName: deepvariant {
    container  = 'file:///software/hgi/containers/deepvariant_0.10_UKB.sif'
    containerOptions = "--bind /lustre --bind /tmp"
    cpus = 2
    errorStrategy = { (task.attempt <= maxRetries)  ? 'retry' : 'ignore' }
    maxRetries = 3
    memory = '8G'
    //disk '20 GB'
    //time '100m'
    //queue 'normal'
  }

  withName: gatk_haplotypecaller {
    container  = 'file:///software/hgi/containers/gatk_4.2.4.0.sif'
    containerOptions = "--bind /lustre --bind /tmp"
    errorStrategy = { (task.attempt <= maxRetries)  ? 'retry' : 'ignore' }
    maxRetries = 3
    cpus = 2
    memory = '8G'
    //disk '20 GB'
    //time '100m'
    //queue 'normal'
  }

  withName: markDuplicates {
    container  = 'file:///software/hgi/containers/gatk_4.2.4.0.sif'
    containerOptions = "--bind /lustre --bind /tmp"
    errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    maxRetries = 3
    memory = '18G'
    cpus = 1
    //time '100m'
    //queue 'normal'
  }

  withName: remap_cram {
    // container  = 'file:///software/hgi/containers/oqfe_remap.sif'
    // containerOptions = "--bind /lustre --bind /tmp --bind ${params.ref_dir}:/ref"
    cpus = 4
    errorStrategy = { (task.attempt <= maxRetries)  ? 'retry' : 'ignore' }
    maxRetries = 3
    stageInMode = 'copy'
    memory = '18G'
    // errorStrategy 'terminate'
    //time '100m'
    //queue 'normal'
  }

  withName: sort_cram {
    container  = 'file:///software/hgi/containers/samtools_sambamba.sif'
    containerOptions = "--bind /lustre --bind /tmp --bind ${ref_dir}:/ref"
    errorStrategy = { (task.attempt <= maxRetries)  ? 'retry' : 'ignore' }
    maxRetries = 3
    cpus = 1
    memory = '18G'
    // errorStrategy 'terminate'
    //time '100m'
    //queue 'normal'
  }
  cache = 'lenient'
  executor = 'lsf'
  shell = ['/bin/bash', '-euo', 'pipefail']
}

executor {
    name = 'lsf'
    queueSize = 4000
    poolSize = 4
    submitRateLimit = '10 sec'
    killBatchSize = 50
    pollInterval = '10 sec'
    queueStatInterval = '20 sec'
    dumpInterval = '10 sec'
    exitReadTimeout = '10 sec'
    perJobMemLimit = true
}

docker {
  enabled = false
}

singularity {
  enabled     = true
  autoMounts  = true
  cacheDir = '/software/hgi/containers/'
  runOptions = '--dns 172.18.255.1,172.18.255.2,172.18.255.3'
  envWhitelist = 'HOSTNAME,SSH_CONNECTION,SSH_CLIENT,CVS_RSH,http_proxy,https_proxy,HTTP_PROXY,HTTPS_PROXY'
}


profiles {
  lsf {
    includeConfig './nf_deepvariant/confs/lsf.conf'
    includeConfig './nf_deepvariant/confs/lsf_tasks.conf'
  }
}
